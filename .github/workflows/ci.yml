name: Build Sapphire

on:
  push:
    paths-ignore:
      - "**/*.md"
  pull_request_target:
  workflow_dispatch:

jobs:
  lint:
    name: Check for lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"
      - name: Install Dependencies
        run: yarn install
      - name: Run eslint
        run: yarn lint

  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"
      - name: Install Dependencies
        run: yarn install
      - name: Run Tests
        run: yarn test

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"
      - name: Install Dependencies
        run: yarn install
      - name: Build Sapphire
        run: yarn package
      - name: Compress Artifacts
        run: |
          mkdir -p release/build/zip
          zip -r release/build/zip/windows-build.zip release/build/*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: release/build/zip/windows-build.zip

  # Android build is disabled until we can get the keystore to work properly
  # Keys are not being read properly from the secrets store

  #  build-android:
  #    name: Build Android
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #      - uses: actions/setup-node@v3
  #        with:
  #          node-version: 20
  #          cache: "yarn"
  #      - name: Install Dependencies
  #        run: yarn install
  #      - name: Make gradlew executable
  #        run: chmod +x ./src/android/gradlew
  #      - name: Build Sapphire
  #        env:
  #          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
  #          ANDROID_KEYSTORE_ALIAS_PASS: ${{ secrets.ANDROID_KEYSTORE_ALIAS_PASS }}
  #        run: |
  #          yarn build:renderer
  #          yarn cap sync
  #          yarn cap build android --keystorepath key.jks --androidreleasetype APK --keystorepass "$ANDROID_KEYSTORE_PASS" --keystorealias key0 --keystorealiaspass "$ANDROID_KEYSTORE_ALIAS_PASS"
  #      - name: Move build files
  #        run: |
  #          mkdir -p release/build/android
  #          mv ./src/android/app/build/outputs/apk/release/app-release-signed.apk ./release/build/android/amethyst-v$(node -p "require('./package.json').version").apk
  #      - name: Compress Artifacts
  #        run: |
  #          mkdir -p release/build/zip
  #          zip -r release/build/zip/android-build.zip release/build/android/*
  #      - name: Upload Artifacts
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: android-build
  #          path: release/build/zip/android-build.zip

  # MacOS build is disabled until MacOS isn't such a pain to work with
  # Sideloading is not properly supported on MacOS & the build process is a pain

  #  build-macos:
  #    name: Build MacOS
  #    runs-on: macos-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #      - uses: actions/setup-node@v3
  #        with:
  #          node-version: 20
  #          cache: "yarn"
  #      - name: Install Dependencies
  #        run: yarn install
  #      - name: Build Sapphire
  #        run: USE_HARD_LINKS=false yarn package
  #      - name: Compress Artifacts
  #        run: |
  #          mkdir -p release/build/zip
  #          zip -r release/build/zip/macos-build.zip release/build/*
  #      - name: Upload Artifacts
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: macos-build
  #          path: release/build/zip/macos-build.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"
      - name: Install linux dependencies
        run: |
          sudo apt update
          sudo apt install -y rpm libarchive-tools
          sudo snap install snapcraft --classic
      - name: Install Dependencies
        run: yarn install
      - name: Build sapphire
        run: yarn package
      - name: Compress Artifacts
        run: |
          mkdir -p release/build/zip
          zip -r release/build/zip/linux-build.zip release/build/*
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: release/build/zip/linux-build.zip

  publish-releases:
    if: ${{ success() }}
    needs: [build-windows, build-linux]
    name: Publish Releases
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Install GitHub CLI and jq
        run: sudo apt-get install -y gh jq
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release/build
      - name: Display structure of downloaded files
        run: ls -R release/build
      - name: Check File Sizes
        run: |
          for file in $(find release/build -type f); do
            echo "File: $file"
            ls -lh "$file"
            if [ ! -s "$file" ]; then
              echo "Skipping empty file: $file"
            fi
          done
      - name: Create Draft Release
        id: create_release
        run: |
          UNIQUE_TAG="release-$(date +%Y%m%d%H%M%S)"
          echo "UNIQUE_TAG=$UNIQUE_TAG" >> $GITHUB_ENV
          gh release create "$UNIQUE_TAG" --draft --title "Draft Release $UNIQUE_TAG" --notes "This is a draft release."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload New Assets
        run: |
          for file in $(find release/build -type f); do
            if [ -s "$file" ]; then
              echo "Uploading asset $file"
              gh release upload "$UNIQUE_TAG" "$file" --clobber
            else
              echo "Skipping empty file: $file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UNIQUE_TAG: ${{ env.UNIQUE_TAG }}
